// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingHelp.DB;

#nullable disable

namespace ParkingHelp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkingHelp.Models.HelpOfferDetailModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DiscountApplyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discount_apply_date");

                    b.Property<int>("DiscountApplyType")
                        .HasColumnType("integer")
                        .HasColumnName("discount_apply_type");

                    b.Property<int>("HelpOfferId")
                        .HasColumnType("integer")
                        .HasColumnName("help_offer_id");

                    b.Property<int>("ReqDetailStatus")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("RequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_date");

                    b.Property<int?>("RequestMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("request_mem_id");

                    b.Property<string>("SlackThreadTs")
                        .HasColumnType("text")
                        .HasColumnName("slack_thread_ts");

                    b.HasKey("Id");

                    b.HasIndex("HelpOfferId");

                    b.HasIndex("RequestMemberId");

                    b.ToTable("help_offer_detail", (string)null);
                });

            modelBuilder.Entity("ParkingHelp.Models.HelpOfferModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountApplyCount")
                        .HasColumnType("integer")
                        .HasColumnName("discount_apply_count");

                    b.Property<int>("DiscountTotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("discount_total_count");

                    b.Property<DateTimeOffset?>("HelerServiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("helper_service_date");

                    b.Property<int>("HelperMemId")
                        .HasColumnType("integer")
                        .HasColumnName("helper_mem_id");

                    b.Property<int?>("MemberCarModelId")
                        .HasColumnType("integer");

                    b.Property<string>("SlackThreadTs")
                        .HasColumnType("text")
                        .HasColumnName("slack_thread_ts");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("HelperMemId");

                    b.HasIndex("MemberCarModelId");

                    b.ToTable("help_offer", (string)null);
                });

            modelBuilder.Entity("ParkingHelp.Models.MemberCarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_number");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("member_car", (string)null);
                });

            modelBuilder.Entity("ParkingHelp.Models.MemberModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("MemberLoginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("member_login_id");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("member_name");

                    b.Property<string>("SlackId")
                        .HasColumnType("text")
                        .HasColumnName("slack_id");

                    b.HasKey("Id");

                    b.ToTable("member", (string)null);
                });

            modelBuilder.Entity("ParkingHelp.Models.ReqHelpDetailModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DiscountApplyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discount_apply_date");

                    b.Property<int>("DiscountApplyType")
                        .HasColumnType("integer")
                        .HasColumnName("discount_apply_type");

                    b.Property<int?>("HelperMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("helper_mem_id");

                    b.Property<DateTimeOffset?>("InsertDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date");

                    b.Property<int>("ReqDetailStatus")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Req_Id")
                        .HasColumnType("integer")
                        .HasColumnName("req_id");

                    b.Property<string>("SlackThreadTs")
                        .HasColumnType("text")
                        .HasColumnName("slack_thread_ts");

                    b.HasKey("Id");

                    b.HasIndex("HelperMemberId");

                    b.HasIndex("Req_Id");

                    b.ToTable("req_help_detail", (string)null);
                });

            modelBuilder.Entity("ParkingHelp.Models.ReqHelpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountApplyCount")
                        .HasColumnType("integer")
                        .HasColumnName("discount_apply_count");

                    b.Property<int>("DiscountTotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("discount_total_count");

                    b.Property<int>("HelpReqMemId")
                        .HasColumnType("integer")
                        .HasColumnName("help_req_mem_id");

                    b.Property<int?>("ReqCarId")
                        .HasColumnType("integer")
                        .HasColumnName("req_car_id");

                    b.Property<DateTimeOffset>("ReqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("req_date");

                    b.Property<string>("SlackThreadTs")
                        .HasColumnType("text")
                        .HasColumnName("slack_thread_ts");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("HelpReqMemId");

                    b.HasIndex("ReqCarId");

                    b.ToTable("req_help", (string)null);
                });

            modelBuilder.Entity("ParkingHelp.Models.HelpOfferDetailModel", b =>
                {
                    b.HasOne("ParkingHelp.Models.HelpOfferModel", "HelpOffer")
                        .WithMany("HelpDetails")
                        .HasForeignKey("HelpOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingHelp.Models.MemberModel", "RequestMember")
                        .WithMany("HelpOffersDetail")
                        .HasForeignKey("RequestMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("HelpOffer");

                    b.Navigation("RequestMember");
                });

            modelBuilder.Entity("ParkingHelp.Models.HelpOfferModel", b =>
                {
                    b.HasOne("ParkingHelp.Models.MemberModel", "HelperMember")
                        .WithMany("HelpOffers")
                        .HasForeignKey("HelperMemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingHelp.Models.MemberCarModel", null)
                        .WithMany("HelpOffers")
                        .HasForeignKey("MemberCarModelId");

                    b.Navigation("HelperMember");
                });

            modelBuilder.Entity("ParkingHelp.Models.MemberCarModel", b =>
                {
                    b.HasOne("ParkingHelp.Models.MemberModel", "Member")
                        .WithMany("Cars")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ParkingHelp.Models.ReqHelpDetailModel", b =>
                {
                    b.HasOne("ParkingHelp.Models.MemberModel", "HelperMember")
                        .WithMany("ReqHelpDetailHelper")
                        .HasForeignKey("HelperMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ParkingHelp.Models.ReqHelpModel", "ReqHelps")
                        .WithMany("HelpDetails")
                        .HasForeignKey("Req_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelperMember");

                    b.Navigation("ReqHelps");
                });

            modelBuilder.Entity("ParkingHelp.Models.ReqHelpModel", b =>
                {
                    b.HasOne("ParkingHelp.Models.MemberModel", "HelpReqMember")
                        .WithMany("HelpRequests")
                        .HasForeignKey("HelpReqMemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingHelp.Models.MemberCarModel", "ReqCar")
                        .WithMany("ReqHelps")
                        .HasForeignKey("ReqCarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("HelpReqMember");

                    b.Navigation("ReqCar");
                });

            modelBuilder.Entity("ParkingHelp.Models.HelpOfferModel", b =>
                {
                    b.Navigation("HelpDetails");
                });

            modelBuilder.Entity("ParkingHelp.Models.MemberCarModel", b =>
                {
                    b.Navigation("HelpOffers");

                    b.Navigation("ReqHelps");
                });

            modelBuilder.Entity("ParkingHelp.Models.MemberModel", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("HelpOffers");

                    b.Navigation("HelpOffersDetail");

                    b.Navigation("HelpRequests");

                    b.Navigation("ReqHelpDetailHelper");
                });

            modelBuilder.Entity("ParkingHelp.Models.ReqHelpModel", b =>
                {
                    b.Navigation("HelpDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
